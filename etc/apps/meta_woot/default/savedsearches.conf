[Remove Meta Woot! Stale Data]
disabled = 1
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 03 0 * * *
description = Enable this to remove stale entries from Meta Woot! that have not been updated for X seconds (default is 30 days).
dispatch.earliest_time = -24h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
enableSched = 1
request.ui_dispatch_view = search
schedule_window = 15
search = | inputlookup meta_woot | where recentTime>(now()-`meta_woot_stale_data_secs`) | outputlookup meta_woot

[Generate Meta Woot Server GUID Lookup]
disabled = 1
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
description = Enable this to generate a lookup of Splunk Server hostnames and guids. This is required for the license reporting data model.
dispatch.earliest_time = -24h
dispatch.latest_time = now
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
enableSched = 1
search = | rest splunk_server=* /services/server/info  | fields splunk_server, guid\
| outputlookup meta_woot_server_guid

[Generate Meta Woot! every 5 mins]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */5 * * * *
enableSched = 1
disabled = 1
description = Enable this to have Meta Woot! run every 5 mins. Only enable ONE Generate search.
dispatch.earliest_time = -4d
dispatch.latest_time = +24h
search = | tstats count min(_time) as firstTime, max(_time) as lastTime, max(_indextime) as recentTime where _index_earliest=-10m@m _index_latest=-5m@m (`meta_woot_host_filter`) (`meta_woot_sourcetype_filter`) (`meta_woot_index_filter`) (`meta_woot_splunk_server_filter`) by host, sourcetype, index, splunk_server\
| eval host=lower(host), _time=now()-300\
| collect sourcetype=meta_woot index=`meta_woot_summary`\
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, max(recentTime) as recentTime by host, sourcetype, index\
| fields - count\
| eval hash=md5(host.sourcetype.index)\
| lookup meta_woot hash OUTPUTNEW firstTime as firstTimekv, _key AS _key\
| where hash=_key OR isnull(_key)\
| eval firstTime=if((isnotnull(firstTimekv) AND firstTimekv<firstTime),firstTimekv, firstTime)\
| eval lastUpdated=now(), _key=hash\
| fields host, sourcetype, index, firstTime, lastTime, recentTime, lastUpdated, hash, _key\
| outputlookup meta_woot append=t

[Generate Meta Woot! every 15 mins]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */15 * * * *
enableSched = 1
disabled = 1
description = Enable this to have Meta Woot! run every 15 mins. Only enable ONE Generate search.
dispatch.earliest_time = -4d
dispatch.latest_time = +24h
search = | tstats count min(_time) as firstTime, max(_time) as lastTime, max(_indextime) as recentTime where _index_earliest=-20m@m _index_latest=-5m@m (`meta_woot_host_filter`) (`meta_woot_sourcetype_filter`) (`meta_woot_index_filter`) (`meta_woot_splunk_server_filter`) by host, sourcetype, index, splunk_server\
| eval host=lower(host), _time=now()-300\
| collect sourcetype=meta_woot index=`meta_woot_summary`\
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, max(recentTime) as recentTime by host, sourcetype, index\
| fields - count\
| eval hash=md5(host.sourcetype.index)\
| lookup meta_woot hash OUTPUTNEW firstTime as firstTimekv, _key AS _key\
| where hash=_key OR isnull(_key)\
| eval firstTime=if((isnotnull(firstTimekv) AND firstTimekv<firstTime),firstTimekv, firstTime)\
| eval lastUpdated=now(), _key=hash\
| fields host, sourcetype, index, firstTime, lastTime, recentTime, lastUpdated, hash, _key\
| outputlookup meta_woot append=t

[Generate Meta Woot! every 30 mins]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = */30 * * * *
enableSched = 1
description = Enable this to have Meta Woot! run every 30 mins. Only enable ONE Generate search.
disabled = 1
dispatch.earliest_time = -4d
dispatch.latest_time = +24h
search = | tstats count min(_time) as firstTime, max(_time) as lastTime, max(_indextime) as recentTime where _index_earliest=-35m@m _index_latest=-5m@m (`meta_woot_host_filter`) (`meta_woot_sourcetype_filter`) (`meta_woot_index_filter`) (`meta_woot_splunk_server_filter`) by host, sourcetype, index, splunk_server\
| eval host=lower(host), _time=now()-300\
| collect sourcetype=meta_woot index=`meta_woot_summary`\
| stats sum(count) as count, min(firstTime) as firstTime, max(lastTime) as lastTime, max(recentTime) as recentTime by host, sourcetype, index\
| fields - count\
| eval hash=md5(host.sourcetype.index)\
| lookup meta_woot hash OUTPUTNEW firstTime as firstTimekv, _key AS _key\
| where hash=_key OR isnull(_key)\
| eval firstTime=if((isnotnull(firstTimekv) AND firstTimekv<firstTime),firstTimekv, firstTime)\
| eval lastUpdated=now(), _key=hash\
| fields host, sourcetype, index, firstTime, lastTime, recentTime, lastUpdated, hash, _key\
| outputlookup meta_woot append=t

[Migrate Meta Woot Key]
action.email.useNSSubject = 1
alert.track = 0
description = RUN THIS SEARCH ONCE, ONLY IF UPGRADING TO V3. This search changes the meta_woot KV store_key to use a hash going forward. This will eliminate a clashing KV store issue that has been experienced by some users. This search only needs to be run once at upgrade time.
disabled = 1
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
request.ui_dispatch_app = meta_woot
request.ui_dispatch_view = search
enableSched = 0
search = | inputlookup meta_woot \
| dedup host, index, sourcetype sortby firstTime\
| eval hash=md5(host.sourcetype.index)\
| eval _key=hash\
| outputlookup meta_woot
