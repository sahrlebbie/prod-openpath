import os
import sys
import json
from ar_action_utility import get_ar_index, validate_ip, handle_error
from ar_action_connect import IOUtil

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def dowork(helper):
    """Get vulnerability summary from Tenable IO
    
    Args:
        helper (object): object of ModularAlertBase class
    
    Returns:
        list: List of asset resource records
    """
    events = helper.get_events()
    ip = helper.get_param("ip")
    host_name = helper.get_param("host_name")
    for event in events:
        try:
            iou = IOUtil(event, helper)
        except Exception as e:
            return handle_error(
                helper, 
                "IO", 
                "Failed initializing TenableIO. Make sure you have IO account configured"
                " and you are running the AR action on IO notable event.", 
                str(e)
            )
        # if ip or host name is not provided try to get target from event
        if not ip and not host_name:
            target = event.get("dest_ip") if event.get(
                "dest_ip") else event.get("dest")
        elif ip:
            if not validate_ip(ip):
                return handle_error(helper, "IO", "Invalid IP address")
            else:
                target = ip
        else:
            target = host_name

        filters = [("host.target", "eq", str(target))]
        try:
            assets = iou.tio.workbenches.vuln_assets(*filters)
            if not len(assets):
                return handle_error(
                    helper, "IO", "No assets found for the target: {}".format(target))
            else:
                return assets
        except Exception as e:
            return handle_error(
                helper, "IO", "Failed to get vulnerability summary", str(e))


def process_event(helper, *args, **kwargs):
    """Write response event in sourcetype
    
    Args:
        helper (object): object of ModularAlertBase class
    
    Returns:
        int: return code
    """
    helper.log_info("Alert action get_io_vulnerability_summary started.")
    data = dowork(helper)
    data = data if isinstance(data, list) else [data]
    for item in data:
        helper.addevent(json.dumps(item),
                        sourcetype="tenable:io:vuln_summary:ar")
    ar_index = get_ar_index(helper.session_key)
    helper.writeevents(index=ar_index)
    return 0
