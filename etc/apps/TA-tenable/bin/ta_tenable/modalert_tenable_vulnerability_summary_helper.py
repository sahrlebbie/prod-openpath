import os
import sys
import json
from ar_action_utility import validate_ip, get_ar_index, handle_error
from ar_action_connect import SCUtil

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def dowork(helper):
    """Get vulnerability summary from Tenable SC server
    
    Args:
        helper (object): object of ModularAlertBase class
    
    Returns:
        dict: either returns the response from the API call or the error received from the handle_error method
    """
    ip = helper.get_param("ip")
    dns_name = helper.get_param("dns_name")
    params = {
        "source": "cumulative",
        "sort_field": "score",
        "sort_direction": "desc",
        "tool": "sumip",
        "type": "vuln",
        "limit": 1000
    }
    events = helper.get_events()
    for event in events:
        try:
            scu = SCUtil(event, helper)
        except Exception as e:
            return handle_error(
                helper, 
                "SC", 
                "Failed initializing TenableSC. Make sure you have SC account configured"
                " and you are running the AR action on SC notable event.", 
                str(e)
            )
        
        if ip and not validate_ip(ip):
            return handle_error(helper, "SC", "Invalid IP is provided")
        elif not dns_name:
            ip = event.get("dest_ip")
            dns_name = event.get("dest")

        # get vulnerability summary for given ip and dns
        ip_filter = ("ip", "=", ip)
        dns_filter = ("dnsName", "=", dns_name)
        filters = []
        if ip and dns_name:
            filters.append(ip_filter)
            filters.append(dns_filter)
        elif ip:
            filters.append(ip_filter)
        else:
            filters.append(dns_filter)
        try:
            vulns = scu.tsc.analysis.vulns(*filters, **params)
            vuln = next(vulns, None)
            return vuln if vuln else handle_error(
                helper, 
                "SC", 
                "No vulnerability summary found for ip: {} and dns_name: {}"
                .format(ip, dns_name)
            )
        except Exception as e:
            return handle_error(
                helper, "SC", "Failed to get vulnerability summary", str(e))


def process_event(helper, *args, **kwargs):
    """Write response event in sourcetype
    
    Args:
        helper (object): object of ModularAlertBase class
    
    Returns:
        int: return code
    """
    helper.log_info("Alert action tenable_vulnerability_summary started.")
    data = dowork(helper)
    helper.addevent(json.dumps(data), sourcetype="tenable:sc:vuln_summary:ar")
    ar_index = get_ar_index(helper.session_key)
    helper.writeevents(index=ar_index)
    return 0
