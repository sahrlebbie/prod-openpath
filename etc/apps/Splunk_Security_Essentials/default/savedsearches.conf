[Generate MITRE matrix list]
alert.track = 0
display.general.type = statistics
display.page.search.tab = statistics
description = This search formats the MITRE Attack framework table into a list format.
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
search = | mitremap\
| transpose 100 column_name="Tactic"\
| rename "row *" AS technique_*\
| untable Tactic Technique_Order Technique\
| eval Technique_Order=substr(Technique_Order,11,2)\
| sort Technique_Order\
| streamstats count AS Tactic_Order\
| eval Tactic_Order=if(Technique_Order="1",Tactic_Order,null)\
| sort Tactic Tactic_Order\
| filldown Tactic_Order\
| sort Tactic_Order Technique_Order\
| eval Matrix="Enterprise ATT&CK"\
| table Matrix Tactic Tactic_Order Technique Technique_Order\
| outputlookup mitre_matrix_list.csv



[Saved Searches and the Data that Enables Them]
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
description = This expects that you have completed the Data Inventory configuration, and mapped your active content on the Manage Bookmarks page. You will then be get a list oriented to the saved searches, showing each saved search and the data set and products that enable it
request.ui_dispatch_app = Splunk_Security_Essentials
request.ui_dispatch_view = search
search = | inputlookup data_inventory_products_lookup \
| search stage!=step-sourcetype stage!=step-cim \
| rex field=basesearch "^\s*(?<basesearch>.*?)\s*$" \
| eval basesearch=if(like(basesearch, "(%") AND like(basesearch, "%)"), basesearch, "(" . basesearch . ")") \
| makemv delim="|" eventtypeId \
| mvexpand eventtypeId \
| rename eventtypeId as data_source_categories \
| join data_source_categories \
    [| sseanalytics \
    | search search_title!="" \
    | stats count count(eval(bookmark_status="successfullyImplemented")) as count_successfullyImplemented values(search_title) as search_title by bookmark_status data_source_categories \
    | eval search_title=mvjoin(search_title, "|")] \
| eval Product = vendorName . " " . productName \
| makemv search_title delim="|" \
| mvexpand search_title\
| stats values(basesearch) as basesearch values(Product) as Product by search_title\
| eval basesearch = "(" . mvjoin(basesearch, " OR ") . ")", "Products That Provide Visibility"=mvjoin(mvfilter(Product!=" "), ", ")\
| rename basesearch as "Dataset That Provides Visibility" search_title as "Saved Search Name"\
| table "Saved Search Name" "Dataset That Provides Visibility" "Products That Provide Visibility"


[Products and the Content Mapped to Them]
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
description = This expects that you have completed the Data Inventory configuration, and mapped your active content on the Manage Bookmarks page. You will then get a complete view from product to the content that it enables.
request.ui_dispatch_app = Splunk_Security_Essentials
request.ui_dispatch_view = search
search = | inputlookup data_inventory_products_lookup \
| search stage!=step-sourcetype stage!=step-cim \
| rex field=basesearch "^\s*(?<basesearch>.*?)\s*$"\
| eval basesearch=if(like(basesearch, "(%") AND like(basesearch, "%)"), basesearch, "(" . basesearch . ")") \
| makemv delim="|" eventtypeId \
| mvexpand eventtypeId \
| rename eventtypeId as data_source_categories \
| join data_source_categories \
    [| sseanalytics \
    | search search_title!="" \
    | stats count count(eval(bookmark_status="successfullyImplemented")) as count_successfullyImplemented values(search_title) as search_title by data_source_categories \
    | eval search_title=mvjoin(search_title, "|")] \
| eval Product = vendorName . " " . productName\
| makemv delim="|" data_source_categories | mvexpand data_source_categories\
| rex field=data_source_categories "^(?<ds>[^-]*)" | sseidenrichment type=datasourceid field=ds | sseidenrichment type=dscid field=data_source_categories | eval data_source_categories = data_source . " > " . data_source_category| stats values(*) as * by Product | search Product!=" " \
| table Product basesearch data_source_categories metadata_json search_title count \
| spath input=metadata_json | fields - metadata_json\
| table Product basesearch data_source_categories search_title * count \
| rename count as "Total Mapped Content for This Product" basesearch as "Dataset That Provides Visibility" search_title as "Saved Search Name" data_source_categories as "Data Source Category" description as Description


[Generate Data Availability ML Model for Latency]
disabled = 1
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
request.ui_dispatch_app = Splunk_Security_Essentials
request.ui_dispatch_view = search
search = | tstats count values(source) as source avg(_indextime) as indextime where \
    [| inputlookup data_inventory_products_lookup \
    | eval category=case(isnotnull(daily_event_volume) AND daily_event_volume > 50000, "highvolumelowlatency", stage!="step-sourcetype", "normal", 1=1,"unused") \
    | lookup SSE-data-availability-products-categorization productId OUTPUT category as category_override \
    | eval category=coalesce(category_override, category) \
    | search category="highvolumelowlatency" OR category="normal" \
    | eval termsearch = "(" . termsearch . ")" \
    | stats values(termsearch) as search \
    | eval search="(" . mvjoin(search, " OR ") . ")" ] earliest=-30d by index sourcetype _time span=5m \
| eval reduce_factor_to_limit_memory_explosion = 10\
| where random()%reduce_factor_to_limit_memory_explosion = 1 \
| eval lag = indextime - _time - 180 \
| stats values(lag) as lag values(source) as source by index sourcetype _time \
| where lag > 0 \
| eval productId=null, \
    [| inputlookup data_inventory_products_lookup \
    | eval category=case(isnotnull(daily_event_volume) AND daily_event_volume > 50000, "highvolumelowlatency", stage!="step-sourcetype", "normal", 1=1,"unused") \
    | lookup SSE-data-availability-products-categorization productId OUTPUT category as category_override \
    | eval category=coalesce(category_override, category) \
    | search category="highvolumelowlatency" OR category="normal" \
    | eval termsearch = "(" . termsearch . ")" \
    | rex field=termsearch mode=sed "s/\"/\\\"/g" \
    | eval search = "productId=if(searchmatch(\"" . termsearch . "\"), mvappend(productId, \"" . productId . "\"), productId)" \
    | stats values(search) as search \
    | eval search=mvjoin(search, ", ")]\
| mvexpand productId\
| fit DensityFunction lag  by productId upper_threshold=0.01 dist=norm into app:sse_event_lag_model\
| stats count as baseline_num_data_samples avg(lag) as baseline_avg_lag min(_time) as baseline_earliest max(_time) as baseline_latest by productId | eval baseline_update_last_run = now(), baseline_lag_at_last_update = now() - baseline_latest  | outputlookup SSE-data_availability_latency_status.csv
